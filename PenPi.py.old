#!/usr/bin/env python2

#import abc
import subprocess
import os


class Penpi:
   location = "/sys/kernel/config/usb_gadget/"
   deviceName = "penpi"
   deviceSerial = "fedcba9876545682"
   manufacturer = "PenPi"
   productName = "PenPi USB"

   def __init__(self):
      self.deviceName = "penpi"
   def initSetup(self):
      cmd = "cd "+ self.location
      os.system(cmd)
      cmd = "mkdir -p "+ self.deviceName
      os.system(cmd)
      cmd = "cd "+ self.deviceName
      os.system(cmd)
      cmd = "cd "+ self.deviceName

      cmd = "echo 0x1d6b > idVendor" # Linux Foundation
      os.system(cmd)
      cmd = "echo 0x0104 > idProduct" # Multifunction Composite Gadget
      os.system(cmd)
      cmd = "echo 0x0100 > bcdDevice" # v1.0.0
      os.system(cmd)
      cmd = "echo 0x0200 > bcdUSB" # USB2
      os.system(cmd)

      cmd = "mkdir -p strings/0x409" # USB2
      os.system(cmd)

      cmd = 'echo '+self.serialnumber+' > strings/0x409/serialnumber'
      os.system(cmd)
      cmd = 'echo '+self.manufacturer+' > strings/0x409/manufacturer'
      os.system(cmd)
      cmd = 'echo '+self.productName+' > strings/0x409/product'
      os.system(cmd)

      cmd = 'mkdir -p configs/c.1/strings/0x409'
      os.system(cmd)
      cmd = 'echo "Config 1: Main Config" > configs/c.1/strings/0x409/configuration'
      os.system(cmd)
      cmd = 'echo 250 > configs/c.1/MaxPower'
      os.system(cmd)

      # initial config done
      # now settup functions for the device

   def addFunction():
      pass
   def deleteFunction():
      pass
   def enableFunction():
      pass
   def diableFunction():
      pass
   def enableFunctions():
      pass
   def disableFunctions():
      pass
   def up():
      out = subprocess.Popen(['ls', '/sys/class/udc'], stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
      stdout,stderr = out.communicate()
      # print(stdout)
      cmd = stdout.split('\n', 1)[0]+' > ' + location+"/"+deviceName+"/UDC"
      os.system(cmd)
   def down():
      cmd = 'echo "" > ' + location+"/"+deviceName+"/UDC"
      os.system(cmd)
      




out = subprocess.Popen(['ls', '/sys/class/udc'], stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
stdout,stderr = out.communicate()
print(stdout)
##print(stderr)



if __name__ == "__main__":
    # execute only if run as a script
    #main()
    pass